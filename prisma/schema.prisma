generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name            String?
  email           String        @unique
  createdAt       DateTime      @default(now())
  id              String        @id @default(cuid())
  emailVerified   DateTime?
  image           String?
  passwordHash    String?
  role            UserRole      @default(USER)
  updatedAt       DateTime      @updatedAt
  username        String        @unique
  gender          USER_GENDER?
  accounts        Account[]
  eventsAttending Attendee[]
  chatMessages    ChatMessage[]
  comments        Comment[]
  organizedEvents Event[]       @relation("OrganizedEvents")
  posts           Post[]
  payments        Payment[]
}

model Admin {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          UserRole  @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Event {
  id           String        @id @default(cuid())
  title        String
  description  String
  body         String
  location     String
  imageUrl     String?
  organizerId  String
  endDate      DateTime
  startDate    DateTime
  videoUrl     String?
  currency     String        @default("USD")
  price        String        @default("0.00")
  category     String        @default("Other")
  attendees    Attendee[]
  chatMessages ChatMessage[]
  comments     Comment[]
  organizer    User          @relation("OrganizedEvents", fields: [organizerId], references: [id])
  payments     Payment[]
}

model Attendee {
  id           String   @id @default(cuid())
  registeredAt DateTime @default(now())
  userId       String
  eventId      String
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model ChatMessage {
  id             String   @id @default(cuid())
  text           String
  createdAt      DateTime @default(now())
  authorId       String
  eventId        String
  isAnnouncement Boolean  @default(false)
  author         User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  event          Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  authorId  String
  eventId   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Otp {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email])
}

model Payment {
  id             String        @id @default(cuid())
  amount         Float
  currency       String
  status         PaymentStatus @default(PENDING)
  transactionId  String        @unique
  paymentGateway String        // e.g., "mock"
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId        String
  event          Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  cardLast4      String?       // Only last 4 digits for card
  method         String        // card, upi, netbanking, etc.
  metadata       Json?         // Store extra info like UPI ID
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum UserRole {
  USER
  ADMIN
}

enum USER_GENDER {
  Male
  Female
  Other
}
