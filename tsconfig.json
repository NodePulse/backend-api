{
  "compilerOptions": {
    // --- Type Checking ---
    "strict": true,                                    /* (Recommended) Enable all strict type-checking options. This is the cornerstone of leveraging TypeScript's safety features. */
    "noImplicitAny": true,                             /* (Included in `strict`) Raise error on expressions and declarations with an implied 'any' type. Forces you to be explicit about types. */
    "strictNullChecks": true,                          /* (Included in `strict`) When true, `null` and `undefined` have their own distinct types and you'll get type errors when you try to use them where a concrete value is expected. */
    "strictFunctionTypes": true,                       /* (Included in `strict`) Enable stricter checking of function types. */
    "strictPropertyInitialization": true,              /* (Included in `strict`) Ensures that each instance property of a class gets initialized in the constructor. */
    "noUnusedLocals": true,                            /* Report errors on unused local variables. Helps keep the codebase clean. */
    "noUnusedParameters": true,                        /* Report errors on unused parameters in functions. Catches potential refactoring mistakes. */
    "noImplicitReturns": true,                         /* Report error when not all code paths in function return a value. Prevents bugs where a function can implicitly return 'undefined'. */
    "noFallthroughCasesInSwitch": true,                /* Report errors for fallthrough cases in switch statement. Prevents unintentional bugs from missing 'break' statements. */

    // --- Module Resolution ---
    "module": "nodenext",                              /* Specify what module code is generated. 'NodeNext' is the modern standard for Node.js, supporting both ES Modules and CommonJS interop. */
    "moduleResolution": "nodenext",                    /* Determines how modules get resolved. 'NodeNext' is the required counterpart to `module: "NodeNext"`. */
    "baseUrl": "./",                                   /* Base directory to resolve non-absolute module names. Essential for path aliases. */
    "paths": {                                         /* Create module mapping 'aliases' to simplify imports. Avoids long relative paths like '../../'. */
      "@/*": ["src/*"]                                 /* Example: `import { myUtil } from '@/utils/helpers'` instead of `import { myUtil } from '../utils/helpers'`. */
    },
    "resolveJsonModule": true,                         /* Allows importing .json files directly into your code, which is useful for config files. */
    
    // --- JavaScript & Output ---
    "target": "ES2022",                                /* Set the JavaScript language version for emitted JavaScript. ES2022 is a modern, stable target supported by recent Node.js versions. */
    "outDir": "./dist",                                /* Specify an output folder for all emitted JavaScript files. Keeps your compiled code separate from your source. */
    "rootDir": "./src",                                /* Specify the root folder of your source TypeScript files. */
    "esModuleInterop": true,                           /* Enables compatibility with CommonJS modules that use `module.exports`, allowing `import React from 'react'` syntax. A must-have for the Node.js ecosystem. */
    "sourceMap": true,                                 /* Generate corresponding '.map' source map files. Crucial for debugging production code, as it lets you see your original TypeScript code in stack traces. */

    // --- Project & Build ---
    "forceConsistentCasingInFileNames": true,          /* Ensures that casing is correct in imports. Prevents issues on case-sensitive file systems (like Linux). */
    "skipLibCheck": true,                              /* Skip type checking of all declaration files (*.d.ts) from dependencies. Speeds up compilation time. */
    "composite": false                                 /* Set to 'true' if this is part of a monorepo with project references. For a standalone project, 'false' is fine. */
  },
  "include": ["src/**/*.ts", "src/**/*.d.ts"],                            /* Specifies which files TypeScript should compile. Here, it's everything inside the 'src' directory. */
  "exclude": ["node_modules"]          /* Specifies files to be excluded from compilation, such as dependencies and test files. */
}

